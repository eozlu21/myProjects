package simplexSolver;

import matrix.Matrix;

/**
 * This took a lot of time to make. I started doing this project in spring break
 * and then stopped until last week of this semester because I simply gave up.
 * After studying for the finals, I was able to write this code.
 */
public class RevisedSimplexSolver {
	private Matrix B;
	private Matrix A;
	private Matrix c;
	private Matrix b;
	private Matrix BInverse; // initialize this in initialize()
	// these will only indicate which variables are basic (like indices)
	private int[] basicVars;
	private int[] nonBasicVars;
	private double[] trueSol;
	private Problem problem;
	private int status = -1; // -1 means not solved
	private int iter = 0;

	public RevisedSimplexSolver(Problem problem) {
		this.problem = problem;
		initialize();
	}

	// Initializes the problem values as matrices.
	public void initialize() {
		A = new Matrix(problem.getConstraints());
		B = A.getColumns(problem.getNumVariables() - problem.getNumConstraints(), problem.getNumVariables() - 1);
		BInverse = B.inverse();
		c = new Matrix(problem.getObjective());
		b = new Matrix(problem.getRhs());
		nonBasicVars = new int[problem.getNumVariables() - problem.getNumConstraints()];
		for (int i = 0; i < nonBasicVars.length; i++) {
			nonBasicVars[i] = i;
		}
		basicVars = B.getIdentityColumnIndices();
		for (int i = 0; i < basicVars.length; i++) {
			basicVars[i] += nonBasicVars.length;
		}

	}

	// Simple min negative value test, returns -1 if not found.
	public int findEnteringVarPrimal() {
		Matrix result = getW().multiply(getN()).subtract(getCN());
		int enteringVariableIdx = result.findMinColWithCoordinates();
		if (enteringVariableIdx == -1) {
			return -1;
		}
		int enteringVariable = nonBasicVars[enteringVariableIdx];
		return enteringVariable;
	}

	// Dual test for entering variable that performs the ratio test.
	public int findEnteringVarDual(int leavingVariable) {
		int minRatioIndex = -1;
		double minRatio = Double.MAX_VALUE;
		Matrix row0 = problem.dirChanged ? getW().multiply(getN()).subtract(getCN()).scalarMultiply(-1)
				: getW().multiply(getN()).subtract(getCN());
		for (int col = 0; col < row0.getCols(); col++) {
			double ratio = row0.getData()[0][col]
					/ (getBInverse().multiply(getA()).getData()[findIndex(basicVars, leavingVariable)][col]);
			if (Math.abs(ratio) < Math.abs(minRatio) && ratio > 0) {
				minRatio = ratio;
				minRatioIndex = col;
			}

		}
		if (minRatioIndex == -1) {
			return -1;
		}
		return nonBasicVars[minRatioIndex];
	}

	// Simple min ratio test for leaving variable.
	public int findLeavingVarPrimal(int enteringVariable) {
		Matrix y = getY(enteringVariable);
		Matrix result = getXB().elementWiseDivide(y);
		int output = result.findMinColWithCoordinatesNonNegative(result);
		if (output == -1) {
			return -1;
		}
		return basicVars[output];
		// -1 is unbounded
	}

	// Dual test that looks for the minimum negative RHS value.
	public int findLeavingVarDual() {
		int leavingVariable = getIndexOfMinimumValue(getXB().getData());
		if (leavingVariable == -1) {
			return -1;
		}
		return basicVars[leavingVariable];
	}

	// Identical to what we do normally.
	public void updateBasis(int enteringVariable, int leavingVariable) {
		int numConstraints = basicVars.length;
		Matrix eroMatrix = Matrix.getIdentityMatrix(numConstraints);
		Matrix nColumn = getNColumn(enteringVariable, leavingVariable, numConstraints);
		eroMatrix.replaceColumn(nColumn, findIndex(basicVars, leavingVariable));
		BInverse = eroMatrix.multiply(BInverse);
		swapElements(nonBasicVars, basicVars, findIndex(nonBasicVars, enteringVariable),
				findIndex(basicVars, leavingVariable));
		return;
	}

	public Matrix getNColumn(int enteringVariable, int leavingVariable, int numConstraints) {
		Matrix y = getY(enteringVariable);
		double[][] nColumnData = new double[numConstraints][1];
		int r = findIndex(basicVars, leavingVariable);
		for (int i = 0; i < numConstraints; i++) {
			if (i == r) {
				nColumnData[i][0] = 1 / y.getData()[r][0];
			} else {
				nColumnData[i][0] = -y.getData()[i][0] / y.getData()[r][0];
			}
		}
		Matrix nColumn = new Matrix(nColumnData);
		return nColumn;
	}

	public void solve() {
		// Check is problem is still unsolved
		while (status == -1) {
			iter = getIter() + 1; // This is something I did that I did not have time to complete.
			solveStep();
		}
	}

	public void solveStep() {
		int enteringVariable;
		int leavingVariable;
		System.out.println(getCB().multiply(getBInverse().multiply(A)).subtract(getC()));
		System.out.println(getBInverse().multiply(A));
		System.out.println(getBInverse().multiply(getB()));
		switch (getSimplexMode()) {
		case 0:
			enteringVariable = findEnteringVarPrimal();
			if (enteringVariable == -1) {
				// optimal solution found
				status = 1; // 1 means solved
				computeTrueSol();
				return;
			}
			leavingVariable = findLeavingVarPrimal(enteringVariable);
			if (leavingVariable == -1) {
				status = -1;
				return;
			}
			updateBasis(enteringVariable, leavingVariable);
			return;

		case 1:
			leavingVariable = findLeavingVarDual();
			enteringVariable = findEnteringVarDual(leavingVariable);
			if (enteringVariable == -1) {
				status = 0; // Our problem is unbounded
				return;
			}
			updateBasis(enteringVariable, leavingVariable);
			return;
		}

	}

	private int getSimplexMode() {
		if (findLeavingVarDual() != -1) {
			return 1; // We are in dual mode
		}
		return 0; // We are in primal mode
	}

	public void computeTrueSol() {
		double[] solution = getXB().asVector();
		double[] trueSol = new double[nonBasicVars.length];
		for (int i = 0; i < trueSol.length; i++) {
			if (findIndex(basicVars, i) == -1) {
				trueSol[i] = 0;
			} else {
				trueSol[i] = solution[findIndex(basicVars, i)];
			}
		}
		this.trueSol = trueSol;
	}

	public Matrix getXB() {
		return BInverse.multiply(b);
	}

	// Get c Matrix according to basicVars (the order should be the same)
	public Matrix getCB() {
		double[][] cBData = new double[1][basicVars.length];
		for (int i = 0; i < basicVars.length; i++) {
			cBData[0][i] = c.getData()[0][basicVars[i]];
		}
		return new Matrix(cBData);
	}

	// Get c Matrix according to nonbasicVars (the order should be the same)
	public Matrix getCN() {
		double[][] cNData = new double[1][nonBasicVars.length];
		for (int i = 0; i < nonBasicVars.length; i++) {
			cNData[0][i] = c.getData()[0][nonBasicVars[i]];
		}
		return new Matrix(cNData);
	}

	// Get a matrix according to nonBasicvars (create matrix with the corresponding
	// columns of nonbasic vars)
	public Matrix getN() {
		double[][] nData = new double[A.getRows()][nonBasicVars.length];
		for (int i = 0; i < A.getRows(); i++) {
			for (int j = 0; j < nonBasicVars.length; j++) {
				nData[i][j] = A.getData()[i][nonBasicVars[j]];
			}
		}
		return new Matrix(nData);
	}

	public Matrix getW() {
		return getCB().multiply(BInverse);
	}

	public Matrix getY(int k) {
		Matrix result = BInverse.multiply(A.getColumnAsMatrix(k));
		return result;
	}

	public static void swapElements(int[] x, int[] y, int i1, int i2) {
		if (x == null || y == null || i1 < 0 || i1 >= x.length || i2 < 0 || i2 >= y.length) {
			// Checks if arrays are null or if indices are out of bounds
			throw new IllegalArgumentException("Invalid input");
		}

		// Swap elements in both arrays
		int temp = x[i1];
		x[i1] = y[i2];
		y[i2] = temp;
	}

	public static int findIndex(int[] arr, int target) {
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == target) {
				return i; // Return index if target is found
			}
		}
		return -1; // Return -1 if target is not found
	}

	public double getZ() {
		return (problem.dirChanged ? -1 * getCB().multiply(getXB()).getData()[0][0]
				: getCB().multiply(getXB()).getData()[0][0]);
	}

	public double[] getTrueSol() {
		return trueSol;
	}

	public String getSolutionInfo() {
		String output = "";
		int idx = 0;
		for (double sol : getTrueSol()) {
			output += String.format("x%d = %.2f%n", ++idx, sol);
		}
		output += String.format("Z = %.2f", getZ());
		return output;
	}

	public int getStatus() {
		return status;
	}

	public int getIter() {
		return iter;
	}

	public Matrix getA() {
		return A;
	}

	public Matrix getC() {
		return c;
	}

	public Matrix getB() {
		return b;
	}

	public Matrix getBInverse() {
		return BInverse;
	}

	public int[] getBasicVars() {
		return basicVars;
	}

	public int[] getNonBasicVars() {
		return nonBasicVars;
	}

	public Problem getProblem() {
		return problem;
	}

	// Enables us to find leaving var for dual simplex
	public int getIndexOfMinimumValue(double[][] array) {
		int minIndex = -1;
		double minValue = 0;

		for (int i = 1; i < array.length; i++) {
			if (array[i][0] < minValue) {
				minValue = array[i][0];
				minIndex = i;
			}
		}

		return minIndex;
	}
}
